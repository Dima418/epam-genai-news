"""Pinecone embedding helper module.

This module provides a helper class for generating embeddings using Pinecone's inference API.
"""

from typing import Any

from loguru import logger


class PineconeEmbeddingHelper:
    """Helper class for generating embeddings using Pinecone's inference API.

    This class uses the Pinecone API to generate embeddings for text inputs,
    which can then be used for vector search operations.
    """

    def __init__(self, pc) -> None:
        """Initialize the embedding helper.

        Args:
            pc (Pinecone): Pinecone client instance
        """
        self._model_name = "multilingual-e5-large"
        self._dimension = 768
        self._pc = pc
        logger.debug(f"Initialized PineconeEmbeddingHelper with model: {self._model_name}")

    def get_dimension(self) -> int:
        """Get the dimension of the embeddings.

        Returns:
            int: The dimension of the embeddings generated by the model
        """
        return self._dimension

    def generate_embedding(self, data_input: str | list[str]) -> list[dict[str, Any]]:
        """Generate embeddings for the given text input.

        Args:
            data_input (str | list[str]): Text to generate embeddings for.
                Can be a single string or a list of strings.

        Returns:
            List of embeddings generated by the Pinecone inference API
        """
        logger.debug(f"Generating embeddings with model: {self._model_name}")
        return self._pc.inference.embed(
            model=self._model_name, inputs=data_input, parameters={"input_type": "passage", "truncate": "END"}
        )
